#!/sbin/sh
# Kopi Installer V1.5
# Since 08-05-2020
# Latest Update 02-10-2021
# by wahyu6070 (dont change)

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";

ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false;
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;
$BOOTMODE && OUTFD=/proc/self/fd/0;
########################################
# Util Functions
########################################

ui_print() { $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> $OUTFD; }
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_progress() { echo "set_progress $1" > $OUTFD; }

#Kopi functions
print(){ $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> $OUTFD; }
getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }
del(){ rm -rf "$@"; }
delete(){ rm -rf "$@"; }
cdir(){ mkdir -p "$@"; }
abort(){ print "$1"; exit 1; }

#
printlog(){
	print "$1"
	if [ "$1" != " " ]; then
	echo "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	echo "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	else
	print "$1" >> $log
	echo "$1" >> $loglive
	fi
	}
sedlog(){
	echo "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	echo "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	}
#
while_log(){
	echo "$1" | tee -a $log
	}
listlog(){
	echo " " >> $log
	echo "---------- Folder List : $1 ----------" >> $log
	echo " " >> $loglive
	echo "---------- Folder List : $1 ----------" >> $loglive
	find "$1" -type f | while read lol; do
	while_log "| $(du -sah $lol | cut -f 1) | $lol"
	done >> $loglive
	echo "--------------------------------------" >> $log
	echo " " >> $log
	echo "--------------------------------------" >> $loglive
	echo " " >> $loglive
	}

loadings() {
  PID=$!
  a=0;
  while [ -d /proc/$PID ]; do
    b=$((+1))
    a=$((a+1))
    sleep 0.9s
    printf "\r${@} [${a}Second]"
  done
}

loadingm() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((h+1))
    sleep 59.9s
    printf "\r${@} [${b}Minutes]"
  done
}

loadingz() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((a+1))
    sleep 0.9s
    printf "#"
  done
}

printmid() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}

setime(){
	if [[ $1 == '-f' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -f "$2" ]; then
	      touch -ct $3 "$2" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	   else
	      echo "setime: $2: Is not file"
	   fi
	elif [[ $1 == '-r' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -d "$2" ]; then
	      find "$2" -print | while read filename; do
	      touch -ct $3 "$filename" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	      done
	   else
	      echo "setime: $2: Is not directory"
	   fi
	elif [[ $1 == '--version' ]] || [[ $1 == '-v' ]]; then
	echo "setime v1.0 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    elif [[ $1 == '--help' ]] || [[ $1 == '-h' ]]; then
    echo "usage : setime <options> <input> <datetime>"
    echo " "
    echo "example : setime -r /sdcard/download 202004081503"
    echo " "
    echo "options"
    echo "-f                    file"
    echo "-r                    change all directory and file"
    echo "-v, --version         version"
    echo "-h, --help            help"
    echo " "
    echo "setime v1.0 since 2020-04-09 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    else
    echo "usage : setime --help"
    fi
}

set_prop() {
  property="$1"
  value="$2"
  file_location="$3"
  if grep -q "${property}" "${file_location}"; then
    sed -i "s/\(${property}\)=.*/\1=${value}/g" "${file_location}"
  else
    echo "${property}=${value}" >>"${file_location}"
  fi
}

########################################
#   Mount Partipations
########################################
setenforce 0
# osm0sis : https://github.com/osm0sis/AnyKernel3
[ -d /postinstall/tmp ] && POSTINSTALL=/postinstall;
[ "$AKHOME" ] || AKHOME=$POSTINSTALL/tmp/anykernel;
[ "$ANDROID_ROOT" ] || ANDROID_ROOT=/system;


file_getprop() { grep "^$2=" "$1" | cut -d= -f2-; }
find_slot() {
  local slot=$(getprop ro.boot.slot_suffix 2>/dev/null);
  [ "$slot" ] || slot=$(grep -o 'androidboot.slot_suffix=.*$' /proc/cmdline | cut -d\  -f1 | cut -d= -f2);
  if [ ! "$slot" ]; then
    slot=$(getprop ro.boot.slot 2>/dev/null);
    [ "$slot" ] || slot=$(grep -o 'androidboot.slot=.*$' /proc/cmdline | cut -d\  -f1 | cut -d= -f2);
    [ "$slot" ] && slot=_$slot;
  fi;
  [ "$slot" ] && echo "$slot";
}
setup_mountpoint() {
  [ -L $1 ] && mv -f $1 ${1}_link;
  if [ ! -d $1 ]; then
    rm -f $1;
    mkdir -p $1;
  fi;
}
is_mounted() { mount | grep -q " $1 "; }
mount_apex() {
  [ -d /system_root/system/apex ] || return 1;
  local apex dest loop minorx num var;
  setup_mountpoint /apex;
  minorx=1;
  [ -e /dev/block/loop1 ] && minorx=$(ls -l /dev/block/loop1 | awk '{ print $6 }');
  num=0;
  for apex in /system_root/system/apex/*; do
    dest=/apex/$(basename $apex .apex);
    case $dest in
      *.current|*.release) dest=$(echo $dest | rev | cut -d. -f2- | rev);;
    esac;
    mkdir -p $dest;
    case $apex in
      *.apex)
        unzip -qo $apex apex_payload.img -d /apex;
        mv -f /apex/apex_payload.img $dest.img;
        mount -t ext4 -o ro,noatime $dest.img $dest 2>/dev/null;
        if [ $? != 0 ]; then
          while [ $num -lt 64 ]; do
            loop=/dev/block/loop$num;
            (mknod $loop b 7 $((num * minorx));
            losetup $loop $dest.img) 2>/dev/null;
            num=$((num + 1));
            losetup $loop | grep -q $dest.img && break;
          done;
          mount -t ext4 -o ro,loop,noatime $loop $dest;
          if [ $? != 0 ]; then
            losetup -d $loop 2>/dev/null;
          fi;
        fi;
      ;;
      *) mount -o bind $apex $dest;;
    esac;
  done;
  for var in $(grep -o 'export .* /.*' /system_root/init.environ.rc | awk '{ print $2 }'); do
    eval OLD_${var}=\$$var;
  done;
  $(grep -o 'export .* /.*' /system_root/init.environ.rc | sed 's; /;=/;'); unset export;
}
umount_apex() {
  [ -d /apex/com.android.runtime ] || return 1;
  local dest loop var;
  for var in $(grep -o 'export .* /.*' /system_root/init.environ.rc | awk '{ print $2 }'); do
    if [ "$(eval echo \$OLD_$var)" ]; then
      eval $var=\$OLD_${var};
    else
      eval unset $var;
    fi;
    unset OLD_${var};
  done;
  for dest in $(find /apex -type d -mindepth 1 -maxdepth 1); do
    if [ -f $dest.img ]; then
      loop=$(mount | grep $dest | cut -d\  -f1);
    fi;
    (umount -l $dest;
    losetup -d $loop) 2>/dev/null;
  done;
  rm -rf /apex 2>/dev/null;
}
mount_all() {
  if ! is_mounted /cache; then
     mount /cache 2>/dev/null && UMOUNT_CACHE=1;
  fi;
  if ! is_mounted /data; then
     mount /data && UMOUNT_DATA=1;
  fi;
  ( mount -o ro -t auto /vendor;
   mount -o ro -t auto /product;
   mount -o ro -t auto /persist) 2>/dev/null;
  setup_mountpoint $ANDROID_ROOT;
  if ! is_mounted $ANDROID_ROOT; then
     mount -o ro -t auto $ANDROID_ROOT 2>/dev/null;
  fi;
  case $ANDROID_ROOT in
    /system_root) setup_mountpoint /system;;
    /system)
      if ! is_mounted /system && ! is_mounted /system_root; then
        setup_mountpoint /system_root;
         mount -o ro -t auto /system_root;
      elif [ -f /system/system/build.prop ]; then
        setup_mountpoint /system_root;
         mount --move /system /system_root;
      fi;
      if [ $? != 0 ]; then
        ( umount /system;
         umount -l /system) 2>/dev/null;
        if [ -d /dev/block/mapper ]; then
          [ -e /dev/block/mapper/system ] || local slot=$(find_slot);
           mount -o ro -t auto /dev/block/mapper/vendor$slot /vendor;
           mount -o ro -t auto /dev/block/mapper/product$slot /product 2>/dev/null;
           mount -o ro -t auto /dev/block/mapper/system$slot /system_root;
           mount -o ro -t auto /dev/block/mapper/system_ext$slot /system_ext;
        else
          [ -e /dev/block/bootdevice/by-name/system ] || local slot=$(find_slot);
          ( mount -o ro -t auto /dev/block/bootdevice/by-name/vendor$slot /vendor;
           mount -o ro -t auto /dev/block/bootdevice/by-name/product$slot /product;
           mount -o ro -t auto /dev/block/bootdevice/by-name/persist$slot /persist) 2>/dev/null;
           mount -o ro -t auto /dev/block/bootdevice/by-name/system$slot /system_root;
        fi;
      fi;
    ;;
  esac;
  if [ -d /dev/block/mapper ]; then
    for block in system vendor product system_ext; do
      for slot in "" _a _b; do
        blockdev --setrw /dev/block/mapper/$block$slot 2>/dev/null
      done
    done
  fi
  if is_mounted /system_root; then
    mount_apex;
    #if [ -f /system_root/build.prop ]; then
       #mount -o bind /system_root /system;
    #else
       #mount -o bind /system_root/system /system;
    #fi;
  fi;
}
umount_all() {
  local mount;
  (if [ ! -d /postinstall/tmp ]; then
    umount /system;
    umount -l /system;
  fi) 2>/dev/null;
  umount_apex;
  (if [ ! -d /postinstall/tmp ]; then
    umount /system_root;
    umount -l /system_root;
  fi;
  umount /vendor; # busybox umount /vendor breaks recovery on some hacky devices
  umount -l /vendor;
  for mount in /mnt/system /mnt/vendor /product /mnt/product /system_ext /mnt/system_ext /persist; do
    umount $mount;
    umount -l $mount;
  done;
  if [ "$UMOUNT_DATA" ]; then
    umount /data;
    umount -l /data;
  fi;
  if [ "$UMOUNT_CACHE" ]; then
    umount /cache;
    umount -l /cache;
  fi) 2>/dev/null;
}
setup_env() {
  $BOOTMODE && return 1;
  mount -o bind /dev/urandom /dev/random;
  if [ -L /etc ]; then
    setup_mountpoint /etc;
    cp -af /etc_link/* /etc;
    sed -i 's; / ; /system_root ;' /etc/fstab;
  fi;
  umount_all;
  mount_all;
  OLD_LD_PATH=$LD_LIBRARY_PATH;
  OLD_LD_PRE=$LD_PRELOAD;
  OLD_LD_CFG=$LD_CONFIG_FILE;
  unset LD_LIBRARY_PATH LD_PRELOAD LD_CONFIG_FILE;
  if [ ! "$(getprop 2>/dev/null)" ]; then
    getprop() {
      local propdir propfile propval;
      for propdir in / /system_root /system /vendor /product /system_ext /odm; do
        for propfile in default.prop build.prop; do
          if [ "$propval" ]; then
            break 2;
          else
            propval="$(file_getprop $propdir/$propfile $1 2>/dev/null)";
          fi;
        done;
      done;
      if [ "$propval" ]; then
        echo "$propval";
      else
        echo "";
      fi;
    }
  elif [ ! "$(getprop ro.build.type 2>/dev/null)" ]; then
    getprop() {
      ($(which getprop) | grep "$1" | cut -d[ -f3 | cut -d] -f1) 2>/dev/null;
    }
  fi;
}
restore_env() {
  $BOOTMODE && return 1;
  local dir;
  unset -f getprop;
  [ "$OLD_LD_PATH" ] && export LD_LIBRARY_PATH=$OLD_LD_PATH;
  [ "$OLD_LD_PRE" ] && export LD_PRELOAD=$OLD_LD_PRE;
  [ "$OLD_LD_CFG" ] && export LD_CONFIG_FILE=$OLD_LD_CFG;
  unset OLD_LD_PATH OLD_LD_PRE OLD_LD_CFG;
  umount_all;
  [ -L /etc_link ] && rm -rf /etc/*;
  (for dir in /etc /apex /system_root /system /vendor /product /system_ext /persist; do
    if [ -L "${dir}_link" ]; then
      rmdir $dir;
      mv -f ${dir}_link $dir;
    fi;
  done;
  umount -l /dev/random) 2>/dev/null;
}

if $BOOTMODE; then
	mount -o rw,remount -t auto / || mount -o rw,remount / 2>/dev/null;
else
	setup_env
	for W78 in /system /product /system_ext /system_root /vendor /; do
		mount -o rw,remount -t auto $W78 2>/dev/null;
	done
fi

#########################################
#    Kopi Script
########################################
	
#(dont change)
print " ";
print "- Kopi Installer by wahyu6070";
print " "
show_progress 1.34 0;

#system dir
if [ -f /system/system/build.prop ]; then
system=/system/system
elif [ -f /system_root/system/build.prop ]; then
system=/system_root/system
elif [ -f /system_root/build.prop ]; then
system=/system_root
else
system=/system
fi

#Extract
kopi=/dev/tmp/kopi
MODPATH=$kopi
TMPDIR=/dev/tmp
cdir $kopi || abort "! Failed create $kopi dir"
cd $kopi
print "- Extracting ZIP File"
unzip -o "$ZIPFILE" >&2

[ ! -f module.prop ] && abort "- Module.prop Not Found"

#prop
prop=$system/build.prop
API=`getp ro.build.version.sdk $prop`
ABI=`getp ro.product.cpu.abi $prop | cut -c-3`
ABI2=`getp ro.product.cpu.abi2 $prop | cut -c-3`
ABILONG=`getp ro.product.cpu.abi $prop`
ARCH=arm
ARCH32=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; ARCH32=arm; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; ARCH32=x86; IS64BIT=true; fi;

MODULE=./module.prop
ID=`getp id $MODULE`
NAME=`getp name $MODULE`
VERSION=`getp version $MODULE`
VERSIONCODE=`getp versioncode $MODULE`
DEVICE=`getp device $MODULE`
DATE=`getp date $MODULE`
AUTHOR=`getp author $MODULE`
KOPIMOD=/data/kopi/modules/"$ID"
MAGISKMOD=/data/adb/modules/$ID
MAGISKUP="/data/adb/modules_update/$ID"
set_progress 0.5;

#req
minsdk=`getp minsdk $MODULE`
if [ $minsdk -eq $minsdk ] && [ $API -lt $minsdk ]; then
abort "- Android version not support !"
fi

#Type install
if [ $(getp typeinstall $MODULE) = kopi ]; then TYPEINSTALL=kopi
elif [ $(getp typeinstall $MODULE) = magisk ]; then TYPEINSTALL=magisk
elif [ $(getp typeinstall $MODULE) = false ]; then TYPEINSTALL=false
else
	if $BOOTMODE; then
		TYPEINSTALL=magisk
	elif [ -f /data/adb/magisk/util_functions.sh ]; then
		TYPEINSTALL=magisk
	else
		TYPEINSTALL=kopi
	fi
fi

# Uninstall
if [ -f $KOPIMOD/uninstall.sh ] && [ $(cat $KOPIMOD/typeinstall) = kopi ] && [ $(getp versioncode $KOPIMOD/module.prop) -eq $VERSIONCODE ]; then
	print "- Uninstalling $NAME"
	test -f $KOPIMOD/uninstall.sh && . $KOPIMOD/uninstall.sh
	del $KOPIMOD
	uninstallmode=true
else
# Installing
	cdir $KOPIMOD
	[ -f uninstall.sh ] && cp -pf uninstall.sh $KOPIMOD && chmod 775 $KOPIMOD/uninstall.sh;
	echo "$TYPEINSTALL" > $KOPIMOD/typeinstall
	[ -f module.prop ] && cp -pf module.prop $KOPIMOD;
	[ -d bin ] && chmod -R 775 $MODPATH/bin;
	[ -f install.sh ] && chmod 775 install.sh && . ./install.sh;
	[ -f customize.sh ] && chmod 0775 customize.sh && . ./customize.sh;
	
	case $TYPEINSTALL in
	magisk)
	print "- Type Magisk Module"
	[ -f /data/adb/magisk/util_functions.sh ] && [ $TYPEINSTALL = magisk ] && . /data/adb/magisk/util_functions.sh
	for W8989 in $MAGISKMOD $MAGISKUP; do
		test -d $W8989 && del $W8989 && cdir $W8989 || cdir $W8989
	done
	touch "/data/adb/modules/$ID/update"
	cp -pf $kopi/module.prop "/data/adb/modules/$ID/"
	if [ -f $kopi/magisk-uninstall.sh ]; then
		test -f $kopi/uninstall.sh && del $kopi/uninstall.sh
		cp -pf $kopi/magisk-uninstall.sh $MAGISKUP/uninstall.sh
		chmod 755 $MAGISKUP/uninstall.sh
		del $kopi/magisk-uninstall.sh
	fi
	if [ -f $kopi/magisk-system.prop ]; then
		cp -pf $kopi/magisk-system.prop $MAGISKUP/system.prop
		del $kopi/magisk-system.prop
	fi
	if [ -f $kopi/magisk-service.sh ]; then
		cp -pf $kopi/magisk-service.sh $MAGISKUP/service.sh
		chmod 755 $MAGISKUP/service.sh
		del $kopi/magisk-service.sh
	fi
	if [ -f $kopi/magisk-post-fs-data.sh ]; then
		cp -pf $kopi/magisk-post-fs-data.sh $MAGISKUP/post-fs-data.sh
		chmod 755 $MAGISKUP/post-fs-data.sh
		del $kopi/magisk-post-fs-data.sh
	fi
	cp -rdf $kopi/* "$MAGISKUP"
	
	LIST_RM="
	$MAGISKUP/META-INF
	$MAGISKUP/install.sh
	$MAGISKUP/customize.sh
	$MAGISKUP/install.zip
	$MAGISKUP/README.md
	"
	for W7878 in $LIST_RM; do
		del $W7878
	done
	;;
	kopi)
	print "- Type Kopi Module"
	#Creating list file or dir installed log
	if [ -d $MODPATH/system ] && [ "$(ls -A $MODPATH/system)" ]; then
		cd $MODPATH/system
		for make_perm_sys in $(find *); do
			echo "$make_perm_sys" >> $KOPIMOD/list_install_system
		done
	fi

	if [ -d $MODPATH/vendor ] && [ "$(ls -A $MODPATH/vendor)" ]; then
		cd $MODPATH/vendor
		for make_perm_ven in $(find *); do
			echo "$make_perm_ven" >> $KOPIMOD/list_install_vendor
		done
	fi
	
	#cp /system/vendor
	if [ -d $kopi/system/vendor ] && [ "$(ls -A $kopi/system/vendor)" ]; then
		cdir $kopi/vendor
		cp -rdf $kopi/system/vendor/* $kopi/vendor/;
		del $kopi/system/vendor
	elif [ -d $kopi/system/vendor ] && [ ! "$(ls -A $kopi/system/vendor)" ]; then
		del $kopi/system/vendor
	fi;
	
	#cp /system
	if [ -d $kopi/system ] && [ "$(ls -A $kopi/system)" ]; then
		print "- Pushing system";
		cp -rdf $kopi/system/* $system/;
	fi;
	#cp vendor
	if [ -d $kopi/vendor ] && [ "$(ls -A $kopi/vendor)" ]; then
		print "- Pushing vendor"; 
		cp -rdf $kopi/vendor/* /vendor/;
	fi;
	set_progress 8.1;
	;;
	false)
		print "- Type install manual" ;;
	*)
		abort "- Type Install $TYPEINSTALL Not found"
	;;
	esac
fi

#permissions
if [ -f $kopi/permissions.sh ] && [ ! $uninstallmode ]; then
print "- Set Permissions"
chmod 755 $kopi/permissions.sh
. $kopi/permissions.sh
fi

#umount
print "- Umounting partitions";
if ! $BOOTMODE; then
	restore_env
fi
set_progress 1.1;
cd /;
del $TMPDIR
print "- Done";
set_progress 0.3;
exit 0;
